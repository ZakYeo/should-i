AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10

Parameters:
  CHECK_COAT_API:
    Type: String
    Description: "API key for authentication"

Resources:

  ShouldIAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,Accept'"
        AllowOrigin: "'http://localhost:3001'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Should-I-API"
        paths:
          /check-coat:
            get:
              produces:
                - application/json
              responses:
                200:
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckCoat.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
          /comment/save:
            post:
              produces:
                - application/json
              responses:
                200:
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveCommentToDB.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /comment/get/nearby:
            get:
              produces:
                - application/json
              responses:
                200:
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNearbyComments.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
          /comment/rate:
            post:
              produces:
                - application/json
              responses:
                200:
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddThumbUpOrDown.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  CheckCoat:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-functions/check-coat/
      Handler: src/handlers/check-coat.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          API_KEY: !Ref CHECK_COAT_API

  SaveCommentToDB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-functions/save-comment-to-db/
      Handler: src/handlers/save-comment-to-db.handler
      Runtime: nodejs18.x

  GetNearbyComments:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-functions/get-nearby-comments/
      Handler: src/handlers/get-nearby-comments.handler
      Runtime: nodejs18.x

  AddThumbUpOrDown:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-functions/add-thumb-up-or-down/
      Handler: src/handlers/add-thumb-up-or-down.handler
      Runtime: nodejs18.x

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Comments
      BillingMode: PAY_PER_REQUEST 
      AttributeDefinitions:
        - AttributeName: "CommentId"
          AttributeType: "S"  
        - AttributeName: "Geohash"
          AttributeType: "S" 
      KeySchema:
        - AttributeName: "CommentId"
          KeyType: "HASH" 
      GlobalSecondaryIndexes:
        - IndexName: "GeohashIndex"
          KeySchema:
            - AttributeName: "Geohash"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL" 
      SSESpecification:
        SSEEnabled: true 

  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: should-i-web-app
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ReactAppBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: ReactAppBucket
                  - "/*"
            Principal: "*"
Outputs:
  ApiURL:
    Description: "API endpoint URL for Prod stage"
    Value: !Sub "https://${ShouldIAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
